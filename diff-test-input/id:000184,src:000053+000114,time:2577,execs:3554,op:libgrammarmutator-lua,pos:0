debug, string, table = ..., function () b = (false), {[(0xd6)]=(nil)}; return (({{(nil),(-( function (...) for self=[[]], (string), (#(((table : asin[[]])-(-function () function self:lines (...) e : pi{write=(3.37e24)}; end; return (0xC);  end)))) do if ... then local package, utf8 = ...; for c=(table<=[[]]), ..., ... do while ((75.7963528e720)) do do do os = {};  end; return (((""%"")^(-...)));  end; math = ".", ((false)); b, c, table = (0xfF);  end; if {} then if (#(false)) then function e.__unm () function b:input (math, string, table) a = {e}; d = io; return "a
/"; end; return c{G=c,[("\b")]=a : codes((false), (function (...) d = io; break;  end), io)}, (nil); end; do d(); d();  end; io({}); c = "";  end;  else function a:flush () local d, package = (false), (7e-48); return {}, ..., ""; end;  end; function a:time (os, package, string) function pack (...) if ({}) then if c then a = e;  else b();  end; return function (debug) b = c{}; break;  end;  end; break; end; return ( not (false)); end; if ... then e(); c : G(); break;  else table = (-b); break;  end; if (false) then c();  else local table = (#((({})*{( not (nil)),[utf8()]=(false)}))), (0xe), (0.6e1); return ((true)), io();  end; table[[]]; repeat a""; e""; return [[]], ..., (((2)*(nil)));  until (e);  end;  end; math : loaded[[]]; local d = ""; function string.debug (os) e(); b : G(); end;  end; return ..., (-{(#(-...)),math});  end ){[( "a" )((0xf))]=(io-[[]]),select=(true)})}}));  end; math[[]]; 