debug, string, table = ..., function () b = (false), {[(0xd6)]=(nil)}; return (({{(nil),(-( function (...) for self=[[]], (string), (#(((table : asin[[]])-(-function () function self:lines (...) e : pi{write=(3.37e24)}; end; return (0xC);  end)))) do if ... then local package, utf8 = ...; for c=(table<=[[]]), ..., ... do string = ((83e-4)); return (((#...))/math);  end;  end; math : loaded[[]]; for table=(true), "", (... and (string{})) do while (( (false) )()) do if {[(-b)]=(0xCE)} then io = utf8; d = ...; for math=( not (830e-63)), function () if (c) then a = io;  else b = d;  end;  end, {} do ( (true) )(); do for table=((b)), {}, {} do a({});  end; a""; utf8""; break;  end;  end; return [[	 
]];  else ( b )("	");  end; do io = e""; for c=os, {concat={offset=( not (nil)),[...]=((false) or (true))},math}, (0xF) do function table.format () b(); break; end; local utf8, b = function () utf8{};  end; e(); return {tan=e};  end; do c = {}; os = ""; return {}, ...;  end; if ((nil) and os"") then for b=..., b, (-d) do e();  end; ( (8.91e8) ) : tmpfile("$
a\z", (false)); break;  end;  end; repeat function os.io (...) ( "." ) : stderr((7e-58), {[(""/"")]=...}, (false), (true)); end;  until (((true)>{[e]=((0xccbc)),_VERSION=( (false) ) : exit(),[""]=(os(((true)>(false)), table : __tostring(), function () debug{(-(true)),{},concat=(0.2e-37)};  end))}));  end;  end; function string.debug (os) e(); b : G(); end;  end; return ..., (-{(#(-...)),math});  end ){[( "a" )((0xf))]=(io-[[]]),select=(true)})}}));  end; math[[]]; 