debug, string, table = ((-d{[...]=function (io, string, b, ...) function string:sethook () if (false) then c"$";  else function os:yield (...) function math.read (string) string, d, table = (-(io)), [[]], (#{[({G=e}+"..")]=...}), {}; end; ( ((d)<(true)) ) : getmetatable{}; end;  end; return ( (false) ){stdout=(false)}; end; e, debug = e, ( [[]] ){}, function (d, math) d{}; e{};  end, [[]], (false), (({}==(true))>...); function debug:gsub () function c.__unm () c : getenv[[a  ]]; return e, {cos=...,[utf8"a"]=((true)),[(-(nil))]=(nil)}; end; end; if ... then local a, utf8, e = (5029e9);  end;  end})), function () b = (false), {[(0xd6)]=(nil)}; return (({{(nil),(-( function (...) for self=[[]], (string), (#(((table : asin[[]])-(-function () function self:lines (...) e : pi{write=(3.37e24)}; end; return (0xC);  end)))) do if ... then local package, utf8 = ...; for c=(table<=[[]]), ..., ... do string = ((83e-4)); return (((#...))/math);  end;  end; math : loaded[[]]; local d = ""; function string.debug (os) e(); b : G(); end;  end; return ..., (-{(#(-...)),math});  end ){[( "a" )((0xf))]=(io-[[]]),select=(true)})}}));  end; math[[]]; 