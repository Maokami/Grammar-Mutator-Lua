package = ((false)/(true)), (function (d) package(); function getupvalue (...) string, os, string, c = ((false)); local string = (nil), ( {[((0xa)*{a,(nil)})]=math,[(false)]=((nil)+( (-...) ) : output(..., package)),type="0"} )(d, ..., ...); if (false) then e{}; function a:G (...) c[[]]; end;  else function io (d) e = b; break; end; function self:mininteger () e(); break; end;  end; debug, a, table, a = (false), (function () math = ((nil)), (true); while ([[]]) do e{}; break;  end; do function io.io (...) local e = (nil); break; end; return c;  end;  end), e; string = function (...) b = a;  end, ( not (false)), {}; return (nil), io, (nil), function (...) io : G{}; function io:clock () os""; while ((true)) do d = b; math[[.]];  end; end; break;  end, (#function (...) d = {}, ((-(nil))); do self = io;  end; a = (c{}); os = e;  end), (-((#((#{})))^(0xC))); end;  end); return ( not (true)); 