function string.wrap () ( (0e-2) ){[(true)]=(#(false))}; if ( function (...) for self=[[]], (string), (#(((table : asin[[]])-(-function () function self:lines (...) e : pi{{(nil),(-( function (...) for self=[[]], (string), (#(((table : asin[[]])-(-function () function self:lines (...) e : pi{write=(3.37e24)}; end; return (0xC);  end)))) do if ... then local package, utf8 = ...; for c=(table<=[[]]), ..., ... do string = ((83e-4)); return (((#...))/math);  end;  end; math : loaded[[]]; local d = ""; function string.debug (os) e(); b : G(); end;  end; return ..., (-{(#(-...)),math});  end ){{(nil),(-( function (...) for self=[[]], (string), (#(((table : asin[[]])-(-function () function self:lines (...) e : pi{write=(3.37e24)}; end; return (0xC);  end)))) do if ... then local package, utf8 = ...; for c=(table<=[[]]), ..., ... do string = ((83e-4)); return (((#...))/math);  end;  end; math : loaded[[]]; local d = ""; function string.debug (os) function os:cos (self, a, e) a, math = ( (0xF) ) : cos{}, package; string = debug, e; do do while ("") do function utf8.time () e : os{}; local b, os = a, {}; return "/"; end;  end; while ((nil)) do ( (nil) )[[]]; function upvalueid () if [[]] then debug, debug, c, self, e, math, debug = (b""), (nil), (true), (nil); return ((76e3));  else c : io(a, d); math, a, os = {b,{}}, ...; return io, function (debug) b();  end;  end; end;  end;  end; d, d, string, math = (( {} )".\r"-(-...)), {getmetatable=([[.]])}, {}; if (false) then function __eq (math, b, ...) do if ... then e = b;  end; b{e}; return d;  end; return (false), (true); end;  end; return {}, {}, (false);  end; return function (debug) math : stdout(); break;  end; end; b : G(); end;  end; return ..., (-{(#(-...)),math});  end ){[( "a" )((0xf))]=(io-[[]]),select=(true)})}})},select=(true)}; end; return (0xC);  end)))) do if ... then local package, utf8 = ...; for c=(table<=[[]]), ..., ... do string = ((83e-4)); return (((#...))/math);  end;  end; math : loaded[[]]; local d = ""; function string.debug (os) e(); b : G(); end;  end; return ..., (-{(#(-...)),math});  end ){[( "a" )((0xf))]=(io-[[]]),select=(true)} then b, d = table : lines();  end; e : G(a, c); self = c; ( {} ) : modf{packsize=(true),(true),(043.598e-6264)}; return (false); end; for io=[[.]], (#(true)), (nil) do package : concat[[$/]];  end; self[[]]; local b = (true); 