utf8, c, utf8, utf8, package = (0xC), (nil); local string, table = [[]]; local e, math, b, utf8, package, c = [[0]]; package = ( (( not ...) or ( (false) ){tan=b,packsize=function (b, self, e) do function os:sethook () if (-function () e(); e = "";  end) then c = {};  end; function lower () math, os, string, table = ""; end; local a, a, math, math = (0xF), function (...) function os (...) c : G(); end; if (nil) then do io{d};  end; c(); e, d = "	"; return function () d"";  end;  end; break;  end; return (0xEFDB), (nil); end; while (( not ( not (false)))) do function a.exp () d, a, os, string = ""; break; end; repeat math = a : clock{}; for table=function (d, b) os(); b"";  end, b, ... do c = ""; function next (package) if utf8 then os[[.]];  else os = {}; math"";  end; c : exp(d); for e=(false), e, e do do a"";  end;  end; end;  end;  until ("");  end; return ( not (( not ...))), function () a(); a, c = ([[]]), c; return package, (false);  end, (-...);  end;  end}) ) : upvaluejoin{("a /")}, e; e(); 