( function (d, c) function getinfo () local b = (nil); local table, a, e, d, utf8, table, e = function (e, e, package) ( (false) )[[]]; for debug=( not (nil)), [[]], (nil) do repeat function b:remove (...) function pi () b{e}; ( function (...) function getinfo () local b = (nil); local table, a, b, c, utf8, table, e = function (e, e, package) ( (false) )[[]]; for debug=( not (nil)), [[]], (nil) do repeat function b:remove (...) function pi () c{e}; e(); c = ""; end; do if [[]] then local string = (function () os = b; d = {}; c{}; return [[]];  end*package), (nil), ( not (nil)); return c : write{input=package{stdin={},(nil),[(nil)]=((false))}}, function (...) if ( "" )() then d, io, a, e, b, a, os = "", ..., (nil); return (#{});  else a{}; return (false), "";  end; if (-(...%(false))) then while ((((8))+function (e, e, ...) do e(); io"";  end;  end)) do string, utf8 = (false), (d%a), ((nil)); break;  end; c""; function b:loadlib (io) b(); math = c"0", function (b) c : getmetatable();  end; break; end; ( (-((nil))) ){pack=( not function () c(); e = (8e0); os = (0xd); return debug, "", io, c;  end),[c]=b,a,(true)}; break;  end; if (9) then c = d;  end; utf8[[$$$]];  end;  end; d();  end; d""; end; d"";  until (e); break;  end; break;  end; end;  end ){}; e(); end; d(); end; d();  until (e); break;  end; break;  end; end;  end ){}; 