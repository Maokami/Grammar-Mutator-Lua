local c, os, d, utf8, os, b, math = (0xd5); local io, self, d, utf8 = ( not "a"), ...; return (( function () function char (...) ( (string>{}) )""; local d, string = (nil), ( not os()), (nil), (false), (0xE2), (nil); c = (false); math = {}, (true), package((false), ( ( {} )((nil), {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, function () c, utf8, utf8 = {debug : wrap((0xdfCaCAcB)),[e()]="	",sqrt={(nil)},(29e-7)}; function math:atan (...) function G () b{e}; end; local utf8, string = "", function (utf8, ...) if {exp={},[function () debug[[]]; while (math) do function ult (a) c{}; end; break;  end; a, package = d; string = os; c : G{};  end]=(a[[]])} then if (4315.58e-8) then utf8 : G{a}; return {(0x5eDE),io=b};  end; do e((...)); return (a+d""), (c), ( io ){};  end; break;  end;  end; function os:__add () local b = (function (...) do if ... then e((c), a); function G () d(a{}); end; e{};  end;  end; d : stdout""; b{}; d""; io = d;  end), c, b; return (true), {}; end; function c.randomseed (...) do if (true) then local string, a, package = b, ...;  else function self.tmpfile (b) b : pack".
"; ( d ) : getlocal{"",[(false)]=(nil)}; end;  end; break;  end; end; return (-((nil)==[[]])); end;  end, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, ( (c==[[]]) ) : byte{}) ) : byte()), b; end;  end )"  "); 