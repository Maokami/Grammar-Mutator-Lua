( function (io, e, os, c, ...) ( (({}) or table : min[[ ]]) ) : getlocal(function (...) if (61) then table(function (table) local e = (b*b : G""), (""), self; ( function (...) for a={}, c, ... do d((nil), (function (string, debug, ...) local c, b, os = ((nil)); return ( not function () function debug:setlocal () function sethook () local d = b, d; function string:type (a, ...) if {pi=a,a} then os".	";  end; end; return {{},cos=os{[(64)]=a,[e]=d,""}}; end; if c then function d.abs (e) io(); end;  end; return ( ((""/debug()) and ((false))) )(""), function (a) local table, c = (nil);  end; end;  end), (nil), function (d, ...) math : exp(function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, function (...) e = a;  end, [[$]], {});  end, (function (io) ( (true) ) : __tostring"\x2C\u{A}$\xd0";  end);  end), (...)); d"";  end;  end ){}; break;  end); c{}; break;  else e();  end; break;  end);  end )""; 