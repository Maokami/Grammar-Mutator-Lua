( function (string, os, math, c, debug, d, ...) c, table = os, ((#{})); c{[(string and c)]=(false)}; if string : __newindex() then while ((#((((-( e )())/e : getmetatable()) and math)))) do local c = ".0", (false), (true), function (math) function utf8.stdin () ( ( ({}) ) : unpack() ) : stdin(); debug = (false); ( function () for e=(d : G((b))<( not utf8)), (nil), (#b) do if ({(0xAB)}) then ( {} ) : setmetatable();  else local e = {}, "."; d(); io = e; return d, "";  end;  end; break;  end )(); local c, math, c, d = {stdin=(true)}; end;  end; function math:setvbuf (...) if {} then if {d} then c[[]];  end;  else io, package = {}, "";  end; return (nil), (nil), "", {[(true)]=""}, (a .. ((0xE))); end; for c=..., ..., ( (nil) )"/" do local os = (-(#(0xCEAdAd))); local self, math = table : exit((""), {}); if function () if (true) then function getupvalue () function G () a[[]]; end; if {} then io = e;  end; function b.upper () c : min{}; d : G(); local d = (7), d; end; repeat c : pi(); do c{};  end;  until ((false)); end;  end;  end then self(...); self"$"; break;  end;  end;  end;  end;  end )(); 