debug, string, table = ..., function () b = (false), {[(0xd6)]=(nil)}; return (({{(nil),(-( function (...) for self=[[]], (string), (#(((table : asin[[]])-(-function () function self:lines (...) e : pi{write=(3.37e24)}; end; return (0xC);  end)))) do if ... then local package, utf8 = ...; for c=(table<=[[]]), ..., ... do string = ((83e-4)); return (((#...))/math);  end;  end; math : loaded[[]]; local d = ""; function string.debug (os) e(); b : G(); end;  end; return ..., (-{(#(-...)),math});  end ){[( "a" )((0xf))]=(io-[[]]),select=(true)})}}));  end; for utf8="0", ([[$	0]] .. (true)), self do local debug = ((-"") .. (true)); ( function () utf8, io = (false), [[/]]; return function (...) os((true), utf8); if "a\f$" then local string = "", e; break;  else e(); if ... then if {} then a"";  end;  end; local e = {};  end; function a.io () local a = (c~=c); d[[]]; b = {}; end; return ({}), d : read(), ( (0xaE) ){concat=( (-...) ){[c : load(debug)]=...}}, ( not "");  end;  end )(( ([[
]]>(true)) ) : upvaluejoin((43e4)), ..., (0xB));  end; 