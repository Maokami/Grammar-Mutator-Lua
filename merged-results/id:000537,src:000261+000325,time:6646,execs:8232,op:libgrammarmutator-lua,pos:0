e = (nil), function () while ((a or {utf8=function (...) local io = (#(false)), "$", (0xa); return [[]];  end})) do io : __tostring{traceback=((false))};  end; function c.gethook (...) local e, c = (0xCCf); debug((nil), ( ... ) : upper([[a/0]], c : len())); local debug, io, package, os, math = (false); d[[]]; local string, os = debug, (nil); local io = (86), ..., ([[]]); for c=[[]], (true), function (...) if (nil) then utf8("");  else do table, d, os, d, c = "";  end; string = "", a, a;  end; e = (e); return self{[{function () do b, b = {};  end; b = e; e(e); b = {};  end,( d ) : G(),[(...~=b{})]=(true)}]=(true)};  end do do do b{};  end;  end; return function (...) local package = (false), ((2)-(a-(false))); function a.lines (...) e = e; return ((true)~=(nil)); end; return (0xF);  end;  end; end;  end; 