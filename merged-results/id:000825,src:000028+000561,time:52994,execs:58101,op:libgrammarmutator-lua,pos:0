if (nil) then do ( (false) ) : random{};  end;  else local self = (e or (85)), ("." and (false)), (true); self = [[	a 	]], ( {{[string()]="	 \r"},[...]=(0xc)} ){[(true)]={}}; return function (...) if (2e51) then io : exp{}; while ((0)) do utf8[[]]; for string=function () if (99) then self"";  else d(c);  end; if (99) then self"";  else d(c);  end; if (99) then self"";  else d(c);  end; if (99) then self"";  else d(c);  end; if (99) then self"";  else d(c);  end; if (99) then self"";  else d(c);  end; if (99) then self"";  else d(c);  end; if (99) then self"";  else d(c);  end; if (99) then self"";  else d(c);  end; d(); break;  end, ((true)), ( (1.9e-4) )"0" do b, d = ""; c : G(); break;  end; local self, package, a = (true); function debug:__le () function remove () if function () ( (false) )((false), (0xd));  end then for a=b : G"", io : G(c, c), (false) do d, os = {}, {}, {}; local table = ("">={});  end;  else do utf8 = "";  end; break;  end; if c then utf8 = d, d;  end; end; c(); end; do if b then c = "";  else e(); e{};  end; do do e(io"");  end; return ((false)%(true)), ( (true) )((-( (c : pi()) ){}), c);  end;  end; a = (true), (-...), (false); function e.len (b, c, os, ...) utf8 = ((( not (true)))), (0xe); end;  end; break;  else math(); function len (...) ( d )(); end; return ...;  end; function upvaluejoin (...) if (true) then do b{}; b{};  end; do b{};  end; return ...;  else function c:G (io) b{}; b = a; return (nil), ..., os; end; break;  end; end;  end;  end; 