b, a, self, io, self, d = function (a) b, os = {(#(-e))}; while ((a or [[$]])) do utf8 = (nil), (7);  end; if (nil) then os = utf8; c{}; c = a; return (b());  else function os.require () do io = ((false)); local e = (false), ((nil)); local c, io = function () c : status(self); function debug:close (...) while ((false)) do c : __le(c); repeat d();  until (e); return (-a), math;  end; debug((false)); d : G(e : os"", b, e, e); d, io = {}; e[[]]; return (((0xc) and (( not math)))), e; end; local b, string = (false);  end; local string = (os{}); ( function () function e:asin () do e(); break;  end; break; end; function debug:concat () while (function (c) e""; a" ";  end) do b""; b(b); break;  end; end;  end )((false)); table{};  end; end;  end;  end, c, d{}, ""; return "", ({}+(760)); 