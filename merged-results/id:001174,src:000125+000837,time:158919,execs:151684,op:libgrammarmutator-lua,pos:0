do local math, io, a, utf8 = ..., ..., {floor=(nil)}, [[$$]], (true), ".", {max=(true),[(""+(true))]=(true),{(0xD),( not ...),loaded=(nil),floor=( (true) ) : modf(table),[(nil)]=(((true)) or e),modf=function () e : max(a); return (((0xb)>[[]])/(nil));  end},[a]=[[]],lines=function (string) for utf8=[[]], "", (false) do local e = ( not (table)), {[...]={G=(2),d}}, (-[[]]), os; return ((nil) or "	");  end; do function os:stderr (os) ( (nil) )({}); e([[\a
]]); end; if [[$]] then local a = c; local e = "", ...; do io = e;  end; break;  else local b = (false); return ({}), e[[	]];  end;  end; break;  end}, (true); function debug.sethook () function getlocal (a, e) c, debug = (-b"a"); ( (false) ) : fmod{}; return [[]], a[[]]; end; a(); return (false), {}, (false), function () os{[(true)]=(os%...)}; return "", (6.9), (a(e)~=((false)));  end, (false), (utf8), (true); end;  end; function os.charpattern () local c = [[]], (nil), (true); break; end; if (true) then if (math%{[(((...)>=( (nil) ) : getenv((#"/"), (false), (true), ((2.29)+[[\r. ]]))))]=(nil)}) then math : wrap[[	\t]];  end;  end; return "\aa.$"; 