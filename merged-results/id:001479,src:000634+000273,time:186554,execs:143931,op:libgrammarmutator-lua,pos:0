utf8, c, utf8, utf8, package = (0xC), (nil); local string, table = [[]]; local e, math, b, utf8, package, c = [[0]]; package = ( (( not ...) or ( (false) ){tan=b,packsize=function () function package:tan (io) e = (nil), a; self = {traceback=(((0xac)>=(true))),[(os)]=io,floor=math}, (-(7)); repeat local b = (e), (95);  until ((nil)); for self=((-(nil))), ((((d{io})>=((nil))))), (-(-table : traceback{})) do table, e, utf8, b, string = os{a,[os]=(true),function () a(); break;  end}, (257.4e-3), (nil), (e or (-{[(-{})]={}})); break;  end; return package, function (table) os = ...; e((nil), {a}); a((({})), (#b : rawset[[a\b]])); return (#string), package, (nil);  end; end; function flush (a, io, d) utf8[[]]; utf8 = ...; return os, {}, function (io, string, e) for d=..., (nil), ("") do package"";  end; function c.insert (a, d, string, b, math, ...) function d:pack (self) e{}; a = b; b : G{}; end; end;  end; end; function loadlib (os) if e then a{d,""};  end; e(); return (false), (#(true)); end;  end}) ) : upvaluejoin{("a /")}, e; e(); 