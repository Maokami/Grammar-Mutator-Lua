function find (debug, e, os, ...) if (true) then b, os, math, debug, os = (nil);  end; end; math = {}, (true), package(function (package, ...) local e, os = function (c, ...) while (([[]]~="")) do self((0x9a));  end; return [[a]];  end, {(((0xbEf)+((9.19e-2)*(-(0xA))))<=( not (false)))}, ...; function utf8.tointeger (b) debug[[\xAb]]; local package = a, ...; if function () do e{c}; d();  end; if (#(nil)) then c""; break;  else d, e = e, d;  end; local package = table, ( "" )""; package = os; table(); return (( not ((self{gsub=(true),[(false)]=(false)}-((false) .. (80.8e-993)))))), ..., {modf=[[]]};  end then ( self ) : exp{[(#(false))]=(( not (true))<=(nil))};  end; end; return function () function asin () function a.format (table, utf8) local table, package, os, string, c, io, utf8, self = e, (512e-18); break; end; end; for e=(c), d, ... do math = {}, (5); c{}; local a, e = "", c"."; return e;  end; function self:loadfile () local d = b; return ..., function () e = b; return (#(-(2.7e-6))), ...;  end, (( a : rawlen[[]] ) : __eq[[]]); end;  end;  end, ( ( {} )((nil), {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, ( (c==(... and {})) ) : byte"") ) : byte()), e; 