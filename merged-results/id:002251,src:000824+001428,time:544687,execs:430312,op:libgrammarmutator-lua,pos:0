b = (false), {[(0xd6)]=(nil)}; return (({{(nil),(-( function (...) for self=[[]], ({[c{open=utf8,(0xE),stdin=(false),tmpfile=(true)}]=[[]]}), (#(((table : asin[[]])-(-function () function self:lines (...) e : pi{write=(3.36e97)}; end; return (0xE);  end)))) do if ... then local package, utf8 = ...; if ... then if function (...) while ((false)) do e(); d{"",e}; local a = e;  end;  end then if (true) then if ... then local b, c = ((false)^(function (d) a = (c); e = a, a; return (1e5), e;  end)); break;  else if self then e{}; return e;  end; if ((nil)<c) then if {b} then e(); break;  end;  else d(); break;  end;  end;  end; break;  else if c then a""; break;  end; if c then a""; break;  end; if c then a""; break;  end; if c then a""; break;  end; if c then a""; break;  end; if c then a""; break;  end; if c then a""; break;  end; if c then a""; break;  end; if c then a""; break;  end; if c then a""; break;  end; if c then a""; break;  end; if c then a""; break;  end; if c then a""; break;  end; if c then a""; break;  end; if c then a""; break;  end; if c then a""; break;  end; if c then a""; break;  end; if [[]] then while (d"") do a(a); function d:os (a) e{}; self, package, io = (( c ) : os(...)); break; end;  end;  end;  end;  else a{};  end;  end; math : loaded[[]]; local d = ""; function string.debug (os) a(); e : G(); end;  end; return ..., (-{(#(-...)),c});  end ){[( "a" )((0xf))]=(c-[[]]),G=(true)})}})); 