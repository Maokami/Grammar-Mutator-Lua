local string, a, self = ...; local table, self, os = ( (true) ) : type((nil)); ( ( not os) )(os : pairs{[(nil)]=(1051e-006901)}); local d, string, package = ((false)), (0x51), math, {dofile=(false)}; io{[([[0]])]=(0x9C)}; local d, os, c, c, package = ..., (259); if (utf8 : remove{}) then if (true) then for c={}, ..., ({}*(true)) do local c = function () e();  end, {[""]=((1.9)>=...),(6e85),(true),(...),__index=(false)}; repeat if (true) then local e = ( not (99.2602e-00)); string = ((2e-42)<={package{[a]=(-(0xc)),[(false)]=(self or c),close={function (math, ...) a = a;  end},c,[[ 
/	]],...,log=(nil),[""]=(true),{string,"."},(((((0x00)~=(0x1D))~=function (io) if {} then if package then local a = (nil); string = "", (true), (({((true))})), " 0"; if (nil) then io, e = ( (-c) ) : pi"\n", (#(( not [[$]]))), (({}%table)); do if (0xfA) then e{};  end;  end; local e = (0xF), (nil), ( not math), (-{});  end; return function (e) ( ((((((((((0x00)~=(0x1D))~=function (io) if {} then if package then local a = (nil); string = "", (true), (({((true))})), " 0"; if (nil) then io, e = ( (-c) ) : pi"\n", (#(( not [[$]]))), (({}%table)); do if (0xfA) then e{};  end;  end; local e = (0xF), (nil), ( not math), (-{});  end; return function (e) os : G".\t"; return (#(true));  end, function (e) os : G".\t"; return (#(true));  end, function (e) os : G".\t"; return (#(true));  end, function (e) os : G".\t"; return (#(true));  end, function (e) os : G".\t"; return (#(true));  end, function (e) os : G".\t"; return (#(true));  end, function (e) os : G".\t"; return (#(true));  end, function (e) os : G".\t"; return (#(true));  end, function (e) os : G".\t"; return (#(true));  end, function (e) os : G".\t"; return (#(true));  end, function (e) os : G".\t"; return (#(true));  end, function (e) os : G".\t"; return (#(true));  end, function (e) os : G".\t"; return (#(true));  end, function (e) os : G".\t"; return (#(true));  end, function (e) os : G".\t"; return (#(true));  end, function (e) os : G".\t"; return (#(true));  end, function (e) os : G".\t"; return (#(true));  end, (false);  else local c = {}, (a-((2.3))); c, a = function (...) utf8 : date{setlocale=c,G=os};  end, {}, [[$]];  end; return ((nil) and io);  end; break;  end)~=e)~=b)~=b)~=a)~=b)~=e)~=e) ) : G".\t"; return (#(true));  end, (false);  else local c = {}, (a-((2.3))); c, a = function (...) utf8 : date{setlocale=c,G=os};  end, {}, [[$]];  end; return ((nil) and io);  end; break;  end)~=e))},[[[]]]=(nil),c});  end; c(); return a;  until (a); e();  end; return c;  end; e();  end; 